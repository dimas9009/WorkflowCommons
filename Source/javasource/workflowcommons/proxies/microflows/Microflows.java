// This file was generated by Mendix Studio Pro.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package workflowcommons.proxies.microflows;

import java.util.HashMap;
import java.util.Map;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class Microflows
{
	/**
	 * @deprecated
	 * The default constructor of the Microflows class should not be used.
	 * Use the static microflow invocation methods instead.
	 */
	@java.lang.Deprecated(since = "9.12", forRemoval = true)
	public Microflows() {}

	// These are the microflows for the WorkflowCommons module
	public static void aCT_Attachment_Create(IContext context, workflowcommons.proxies.WorkflowComment _workflowComment)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowComment", _workflowComment == null ? null : _workflowComment.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Attachment_Create").withParams(params).execute(context);
	}
	public static void aCT_Attachment_Download(IContext context, system.proxies.FileDocument _fileDoc)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("FileDoc", _fileDoc == null ? null : _fileDoc.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Attachment_Download").withParams(params).execute(context);
	}
	public static void aCT_Attachment_Save(IContext context, workflowcommons.proxies.WorkflowAttachment _workflowAttachment)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowAttachment", _workflowAttachment == null ? null : _workflowAttachment.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Attachment_Save").withParams(params).execute(context);
	}
	public static void aCT_Comment_Delete(IContext context, workflowcommons.proxies.WorkflowComment _workflowComment)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowComment", _workflowComment == null ? null : _workflowComment.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Comment_Delete").withParams(params).execute(context);
	}
	public static void aCT_CommentsAttachments_Migration(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		Core.microflowCall("WorkflowCommons.ACT_CommentsAttachments_Migration").withParams(params).execute(context);
	}
	public static void aCT_DashboardContext_Refresh(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_DashboardContext_Refresh").withParams(params).execute(context);
	}
	public static boolean aCT_TaskCount_Refresh(IContext context, workflowcommons.proxies.TaskCount _taskCount)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TaskCount", _taskCount == null ? null : _taskCount.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommons.ACT_TaskCount_Refresh").withParams(params).execute(context);
	}
	public static void aCT_UserTask_AssignToMe(IContext context, system.proxies.WorkflowUserTask _workflowUserTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowUserTask", _workflowUserTask == null ? null : _workflowUserTask.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_UserTask_AssignToMe").withParams(params).execute(context);
	}
	public static void aCT_UserTask_AssignToMe_UpdateTaskCount(IContext context, system.proxies.WorkflowUserTask _userTask, workflowcommons.proxies.TaskCount _taskCount)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("UserTask", _userTask == null ? null : _userTask.getMendixObject());
		params.put("TaskCount", _taskCount == null ? null : _taskCount.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_UserTask_AssignToMe_UpdateTaskCount").withParams(params).execute(context);
	}
	public static void aCT_UserTask_ShowDefaultAdminPage(IContext context, system.proxies.WorkflowUserTask _workflowUserTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowUserTask", _workflowUserTask == null ? null : _workflowUserTask.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_UserTask_ShowDefaultAdminPage").withParams(params).execute(context);
	}
	public static void aCT_UserTask_Unassign(IContext context, system.proxies.WorkflowUserTask _userTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("UserTask", _userTask == null ? null : _userTask.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_UserTask_Unassign").withParams(params).execute(context);
	}
	public static void aCT_UserTaskView_ShowUserTaskPage(IContext context, workflowcommons.proxies.UserTaskView _userTaskView)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("UserTaskView", _userTaskView == null ? null : _userTaskView.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_UserTaskView_ShowUserTaskPage").withParams(params).execute(context);
	}
	public static void aCT_UserTaskView_ShowWorkflowAdminPage(IContext context, workflowcommons.proxies.UserTaskView _userTaskView)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("UserTaskView", _userTaskView == null ? null : _userTaskView.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_UserTaskView_ShowWorkflowAdminPage").withParams(params).execute(context);
	}
	public static void aCT_Workflow_Abort(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Workflow_Abort").withParams(params).execute(context);
	}
	public static void aCT_Workflow_CloseJumpToConfirmation(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Workflow_CloseJumpToConfirmation").withParams(params).execute(context);
	}
	public static void aCT_Workflow_Continue(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Workflow_Continue").withParams(params).execute(context);
	}
	public static void aCT_Workflow_JumpTo(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Workflow_JumpTo").withParams(params).execute(context);
	}
	public static void aCT_Workflow_OpenParentWorkflow(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Workflow_OpenParentWorkflow").withParams(params).execute(context);
	}
	public static void aCT_Workflow_Pause(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Workflow_Pause").withParams(params).execute(context);
	}
	public static void aCT_Workflow_Restart(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Workflow_Restart").withParams(params).execute(context);
	}
	public static void aCT_Workflow_Retry(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Workflow_Retry").withParams(params).execute(context);
	}
	public static void aCT_Workflow_Unpause(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Workflow_Unpause").withParams(params).execute(context);
	}
	public static void aCT_Workflow_WithdrawConfirmation(IContext context, workflowcommons.proxies.WorkflowComment _workflowComment)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowComment", _workflowComment == null ? null : _workflowComment.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_Workflow_WithdrawConfirmation").withParams(params).execute(context);
	}
	public static void aCT_WorkflowCommentHelper_SaveNew(IContext context, workflowcommons.proxies.WorkflowCommentHelper _workflowCommentHelper, workflowcommons.proxies.WorkflowView _workflowView)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowCommentHelper", _workflowCommentHelper == null ? null : _workflowCommentHelper.getMendixObject());
		params.put("WorkflowView", _workflowView == null ? null : _workflowView.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_WorkflowCommentHelper_SaveNew").withParams(params).execute(context);
	}
	public static void aCT_WorkflowDefinition_DeleteAllWorkflows(IContext context, system.proxies.WorkflowDefinition _workflowDefinition)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowDefinition", _workflowDefinition == null ? null : _workflowDefinition.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_WorkflowDefinition_DeleteAllWorkflows").withParams(params).execute(context);
	}
	public static void aCT_WorkflowJumpToDetails_Apply(IContext context, system.proxies.WorkflowJumpToDetails _workflowJumpToDetails)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowJumpToDetails", _workflowJumpToDetails == null ? null : _workflowJumpToDetails.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_WorkflowJumpToDetails_Apply").withParams(params).execute(context);
	}
	public static void aCT_WorkflowUserTask_AssignUser(IContext context, system.proxies.User _user, system.proxies.WorkflowUserTask _workflowUserTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("WorkflowUserTask", _workflowUserTask == null ? null : _workflowUserTask.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_WorkflowUserTask_AssignUser").withParams(params).execute(context);
	}
	public static void aCT_WorkflowUserTask_TargetUsers_Add(IContext context, java.util.List<system.proxies.User> _userList, system.proxies.WorkflowUserTask _workflowUserTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> listparam_userList = null;
		if (_userList != null)
		{
			listparam_userList = new java.util.ArrayList<>();
			for (var obj : _userList) {
				listparam_userList.add(obj.getMendixObject());
			}
		}
		params.put("UserList", listparam_userList);

		params.put("WorkflowUserTask", _workflowUserTask == null ? null : _workflowUserTask.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_WorkflowUserTask_TargetUsers_Add").withParams(params).execute(context);
	}
	public static void aCT_WorkflowUserTask_TargetUsers_Remove(IContext context, java.util.List<system.proxies.User> _userList, system.proxies.WorkflowUserTask _workflowUserTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> listparam_userList = null;
		if (_userList != null)
		{
			listparam_userList = new java.util.ArrayList<>();
			for (var obj : _userList) {
				listparam_userList.add(obj.getMendixObject());
			}
		}
		params.put("UserList", listparam_userList);

		params.put("WorkflowUserTask", _workflowUserTask == null ? null : _workflowUserTask.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_WorkflowUserTask_TargetUsers_Remove").withParams(params).execute(context);
	}
	public static void aCT_WorkflowView_ShowWorkflowAdminPage(IContext context, workflowcommons.proxies.WorkflowView _workflowView)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowView", _workflowView == null ? null : _workflowView.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_WorkflowView_ShowWorkflowAdminPage").withParams(params).execute(context);
	}
	public static void aCT_WorkflowView_WithdrawWorkflow(IContext context, workflowcommons.proxies.WorkflowView _workflowView)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowView", _workflowView == null ? null : _workflowView.getMendixObject());
		Core.microflowCall("WorkflowCommons.ACT_WorkflowView_WithdrawWorkflow").withParams(params).execute(context);
	}
	public static system.proxies.WorkflowDefinition dashboardContext_GetSelectedWorkflowDefinition(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.DashboardContext_GetSelectedWorkflowDefinition").withParams(params).execute(context);
		return result == null ? null : system.proxies.WorkflowDefinition.initialize(context, result);
	}
	public static system.proxies.WorkflowUserTaskDefinition dashboardContext_GetSelectedWorkflowTaskDefinition(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.DashboardContext_GetSelectedWorkflowTaskDefinition").withParams(params).execute(context);
		return result == null ? null : system.proxies.WorkflowUserTaskDefinition.initialize(context, result);
	}
	public static workflowcommons.proxies.Configuration dS_Configuration(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.DS_Configuration").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.Configuration.initialize(context, result);
	}
	public static workflowcommons.proxies.TaskCount dS_TaskCount(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.DS_TaskCount").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.TaskCount.initialize(context, result);
	}
	public static workflowcommons.proxies.DashboardContext dS_TaskDashboard(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.DS_TaskDashboard").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.DashboardContext.initialize(context, result);
	}
	public static java.util.List<workflowcommons.proxies.TaskSeries> dS_TaskSeries(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("WorkflowCommons.DS_TaskSeries").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> workflowcommons.proxies.TaskSeries.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static workflowcommons.proxies.WorkflowView dS_Workflow_WorkflowView(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.DS_Workflow_WorkflowView").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.WorkflowView.initialize(context, result);
	}
	public static workflowcommons.proxies.WorkflowCommentHelper dS_WorkflowCommentHelper_InitializeNew(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.DS_WorkflowCommentHelper_InitializeNew").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.WorkflowCommentHelper.initialize(context, result);
	}
	public static java.util.List<system.proxies.WorkflowActivityDetails> dS_WorkflowCurrentActivity_Options(IContext context, system.proxies.WorkflowCurrentActivity _workflowCurrentActivity)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowCurrentActivity", _workflowCurrentActivity == null ? null : _workflowCurrentActivity.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("WorkflowCommons.DS_WorkflowCurrentActivity_Options").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> system.proxies.WorkflowActivityDetails.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static workflowcommons.proxies.DashboardContext dS_WorkflowDashboard(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.DS_WorkflowDashboard").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.DashboardContext.initialize(context, result);
	}
	public static java.util.List<workflowcommons.proxies.WorkflowSummary> dS_WorkflowDefinition_Overview(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> objs = Core.microflowCall("WorkflowCommons.DS_WorkflowDefinition_Overview").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> workflowcommons.proxies.WorkflowSummary.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.util.List<workflowcommons.proxies.DefinitionHelper> dS_WorkflowDefinition_SelectableImplementation(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("WorkflowCommons.DS_WorkflowDefinition_SelectableImplementation").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> workflowcommons.proxies.DefinitionHelper.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.util.List<workflowcommons.proxies.WorkflowSeries> dS_WorkflowSeries(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("WorkflowCommons.DS_WorkflowSeries").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> workflowcommons.proxies.WorkflowSeries.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.util.List<workflowcommons.proxies.UserTaskView> dS_WorkflowTask_AssignedToUser(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("WorkflowCommons.DS_WorkflowTask_AssignedToUser").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> workflowcommons.proxies.UserTaskView.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.util.List<system.proxies.WorkflowUserTaskDefinition> dS_WorkflowTaskDefinition_Selectable_Administrator(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("WorkflowCommons.DS_WorkflowTaskDefinition_Selectable_Administrator").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> system.proxies.WorkflowUserTaskDefinition.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.util.List<workflowcommons.proxies.DefinitionHelper> dS_WorkflowTaskDefinition_Selectable_UserImplementation(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("WorkflowCommons.DS_WorkflowTaskDefinition_Selectable_UserImplementation").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> workflowcommons.proxies.DefinitionHelper.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.util.List<workflowcommons.proxies.WorkflowTaskDetail> dS_WorkflowTaskDetail(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("WorkflowCommons.DS_WorkflowTaskDetail").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> workflowcommons.proxies.WorkflowTaskDetail.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static workflowcommons.proxies.WorkflowView dS_WorkflowUserTask_WorkflowView(IContext context, system.proxies.WorkflowUserTask _workflowUserTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowUserTask", _workflowUserTask == null ? null : _workflowUserTask.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.DS_WorkflowUserTask_WorkflowView").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.WorkflowView.initialize(context, result);
	}
	public static java.util.List<workflowcommons.proxies.UserTaskTimeLine> dS_WorkflowView_UserTaskTimeline(IContext context, workflowcommons.proxies.WorkflowView _workflowView)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowView", _workflowView == null ? null : _workflowView.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("WorkflowCommons.DS_WorkflowView_UserTaskTimeline").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> workflowcommons.proxies.UserTaskTimeLine.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static void oCh_DashboardContext_UpdateTaskDashboard(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		Core.microflowCall("WorkflowCommons.OCh_DashboardContext_UpdateTaskDashboard").withParams(params).execute(context);
	}
	public static void oCh_DashboardContext_UpdateWorkflowDashboard(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		Core.microflowCall("WorkflowCommons.OCh_DashboardContext_UpdateWorkflowDashboard").withParams(params).execute(context);
	}
	public static void oCh_Workflow_State(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		Core.microflowCall("WorkflowCommons.OCh_Workflow_State").withParams(params).execute(context);
	}
	public static void oCh_WorkflowUserTask_State(IContext context, system.proxies.WorkflowUserTask _userTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("UserTask", _userTask == null ? null : _userTask.getMendixObject());
		Core.microflowCall("WorkflowCommons.OCh_WorkflowUserTask_State").withParams(params).execute(context);
	}
	public static void oCl_WorkflowSummary(IContext context, workflowcommons.proxies.WorkflowSummary _workflowSummary)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowSummary", _workflowSummary == null ? null : _workflowSummary.getMendixObject());
		Core.microflowCall("WorkflowCommons.OCl_WorkflowSummary").withParams(params).execute(context);
	}
	public static void sUB_AttachmentsAndCommentsMigration_Verify(IContext context, workflowcommons.proxies.Configuration _configuration)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Configuration", _configuration == null ? null : _configuration.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_AttachmentsAndCommentsMigration_Verify").withParams(params).execute(context);
	}
	public static void sUB_Comment_Migrate(IContext context, workflowcommons.proxies.WorkflowComment _workflowComment, java.util.List<workflowcommons.proxies.WorkflowComment> _migratedWorkflowCommentList)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowComment", _workflowComment == null ? null : _workflowComment.getMendixObject());
		java.util.List<IMendixObject> listparam_migratedWorkflowCommentList = null;
		if (_migratedWorkflowCommentList != null)
		{
			listparam_migratedWorkflowCommentList = new java.util.ArrayList<>();
			for (var obj : _migratedWorkflowCommentList) {
				listparam_migratedWorkflowCommentList.add(obj.getMendixObject());
			}
		}
		params.put("MigratedWorkflowCommentList", listparam_migratedWorkflowCommentList);

		Core.microflowCall("WorkflowCommons.SUB_Comment_Migrate").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_Comments_Migration(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_Comments_Migration").withParams(params).execute(context);
	}
	public static workflowcommons.proxies.Configuration sUB_Configuration_FindOrCreate(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.SUB_Configuration_FindOrCreate").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.Configuration.initialize(context, result);
	}
	public static workflowcommons.proxies.DashboardContext sUB_DashboardContext_RetrieveOrCreate(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.SUB_DashboardContext_RetrieveOrCreate").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.DashboardContext.initialize(context, result);
	}
	public static void sUB_DashboardContext_UpdateSettings(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_DashboardContext_UpdateSettings").withParams(params).execute(context);
	}
	public static void sUB_TaskCount_Update(IContext context, workflowcommons.proxies.TaskCount _taskCount)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("TaskCount", _taskCount == null ? null : _taskCount.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_TaskCount_Update").withParams(params).execute(context);
	}
	public static void sUB_TaskDashboard_Update(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_TaskDashboard_Update").withParams(params).execute(context);
	}
	public static void sUB_TaskSeries_CreateOrUpdate(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext, system.proxies.WorkflowDefinition _workflowDefinition_Selected, system.proxies.User _user, system.proxies.WorkflowUserTaskDefinition _taskDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("TaskDefinition_Selected", _taskDefinition_Selected == null ? null : _taskDefinition_Selected.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_TaskSeries_CreateOrUpdate").withParams(params).execute(context);
	}
	public static void sUB_TaskSeriesList_Delete(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_TaskSeriesList_Delete").withParams(params).execute(context);
	}
	public static workflowcommons.proxies.TaskSummary sUB_TaskSummary_CreateOrUpdate(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext, system.proxies.WorkflowDefinition _workflowDefinition_Selected, boolean _admin, system.proxies.WorkflowUserTaskDefinition _taskDefinition_Selected, system.proxies.User _user)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		params.put("Admin", _admin);
		params.put("TaskDefinition_Selected", _taskDefinition_Selected == null ? null : _taskDefinition_Selected.getMendixObject());
		params.put("User", _user == null ? null : _user.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.SUB_TaskSummary_CreateOrUpdate").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.TaskSummary.initialize(context, result);
	}
	public static workflowcommons.proxies.TaskSummary sUB_TaskSummary_RetrieveOrCreate(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.SUB_TaskSummary_RetrieveOrCreate").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.TaskSummary.initialize(context, result);
	}
	public static administration.proxies.Account sUB_User_GetAccount(IContext context, system.proxies.User _user)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("User", _user == null ? null : _user.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.SUB_User_GetAccount").withParams(params).execute(context);
		return result == null ? null : administration.proxies.Account.initialize(context, result);
	}
	public static void sUB_UserTask_Assign(IContext context, system.proxies.User _user, system.proxies.WorkflowUserTask _workflowUserTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("WorkflowUserTask", _workflowUserTask == null ? null : _workflowUserTask.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_UserTask_Assign").withParams(params).execute(context);
	}
	public static java.util.List<workflowcommons.proxies.UserTaskView> sUB_UserTask_AssignedToUser(IContext context, java.util.Date _completedOrStartedAfter, java.util.Date _completedOrStartedBefore, system.proxies.WorkflowDefinition _workflowDefinition_Selected, system.proxies.User _user, system.proxies.WorkflowUserTaskDefinition _taskDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CompletedOrStartedAfter", _completedOrStartedAfter);
		params.put("CompletedOrStartedBefore", _completedOrStartedBefore);
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("TaskDefinition_Selected", _taskDefinition_Selected == null ? null : _taskDefinition_Selected.getMendixObject());
		java.util.List<IMendixObject> objs = Core.microflowCall("WorkflowCommons.SUB_UserTask_AssignedToUser").withParams(params).execute(context);
		if (objs == null) {
			return null;
		} else {
			return objs.stream()
				.map(obj -> workflowcommons.proxies.UserTaskView.initialize(context, obj))
				.collect(java.util.stream.Collectors.toList());
		}
	}
	public static java.math.BigDecimal sUB_UserTask_AverageHandlingTime(IContext context, java.util.Date _completedAfter, java.util.Date _completedBefore, system.proxies.WorkflowUserTaskDefinition _taskDefinition_Selected, system.proxies.User _user, system.proxies.WorkflowDefinition _workflowDefinition_Selected, java.lang.Long _userTask_CountCompleted)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CompletedAfter", _completedAfter);
		params.put("CompletedBefore", _completedBefore);
		params.put("TaskDefinition_Selected", _taskDefinition_Selected == null ? null : _taskDefinition_Selected.getMendixObject());
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		params.put("UserTask_CountCompleted", _userTask_CountCompleted);
		return (java.math.BigDecimal) Core.microflowCall("WorkflowCommons.SUB_UserTask_AverageHandlingTime").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_UserTask_CountCompleted(IContext context, java.util.Date _completedAfter, java.util.Date _completedBefore, system.proxies.WorkflowUserTaskDefinition _taskDefinition_Selected, system.proxies.WorkflowDefinition _workflowDefinition_Selected, system.proxies.User _user)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CompletedAfter", _completedAfter);
		params.put("CompletedBefore", _completedBefore);
		params.put("TaskDefinition_Selected", _taskDefinition_Selected == null ? null : _taskDefinition_Selected.getMendixObject());
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		params.put("User", _user == null ? null : _user.getMendixObject());
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_UserTask_CountCompleted").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_UserTask_CountCompletedOnTime(IContext context, java.util.Date _completedAfter, java.util.Date _completedBefore, system.proxies.WorkflowDefinition _workflowDefinition_Selected, system.proxies.User _user, system.proxies.WorkflowUserTaskDefinition _taskDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CompletedAfter", _completedAfter);
		params.put("CompletedBefore", _completedBefore);
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("TaskDefinition_Selected", _taskDefinition_Selected == null ? null : _taskDefinition_Selected.getMendixObject());
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_UserTask_CountCompletedOnTime").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_UserTask_CountCompletedOverdue(IContext context, java.util.Date _completedAfter, java.util.Date _completedBefore, system.proxies.WorkflowDefinition _workflowDefinition_Selected, system.proxies.User _user, system.proxies.WorkflowUserTaskDefinition _taskDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CompletedAfter", _completedAfter);
		params.put("CompletedBefore", _completedBefore);
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("TaskDefinition_Selected", _taskDefinition_Selected == null ? null : _taskDefinition_Selected.getMendixObject());
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_UserTask_CountCompletedOverdue").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_UserTask_CountFailed(IContext context, java.util.Date _completedAfter, java.util.Date _completedBefore, system.proxies.User _user, system.proxies.WorkflowDefinition _workflowDefinition_Selected, system.proxies.WorkflowUserTaskDefinition _taskDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CompletedAfter", _completedAfter);
		params.put("CompletedBefore", _completedBefore);
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		params.put("TaskDefinition_Selected", _taskDefinition_Selected == null ? null : _taskDefinition_Selected.getMendixObject());
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_UserTask_CountFailed").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_UserTask_CountInProgress(IContext context, java.util.Date _startedAfter, java.util.Date _startedBefore, system.proxies.WorkflowUserTaskDefinition _taskDefinition_Selected, system.proxies.User _user, system.proxies.WorkflowDefinition _workflowDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("StartedAfter", _startedAfter);
		params.put("StartedBefore", _startedBefore);
		params.put("TaskDefinition_Selected", _taskDefinition_Selected == null ? null : _taskDefinition_Selected.getMendixObject());
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_UserTask_CountInProgress").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_UserTask_CountOverdue(IContext context, java.util.Date _completedAfter, java.util.Date _completedBefore, system.proxies.WorkflowDefinition _workflowDefinition_Selected, system.proxies.User _user, system.proxies.WorkflowUserTaskDefinition _taskDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CompletedAfter", _completedAfter);
		params.put("CompletedBefore", _completedBefore);
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		params.put("User", _user == null ? null : _user.getMendixObject());
		params.put("TaskDefinition_Selected", _taskDefinition_Selected == null ? null : _taskDefinition_Selected.getMendixObject());
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_UserTask_CountOverdue").withParams(params).execute(context);
	}
	public static void sUB_UserTask_TargetUsers_Add(IContext context, java.util.List<system.proxies.User> _userList, system.proxies.WorkflowUserTask _workflowUserTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> listparam_userList = null;
		if (_userList != null)
		{
			listparam_userList = new java.util.ArrayList<>();
			for (var obj : _userList) {
				listparam_userList.add(obj.getMendixObject());
			}
		}
		params.put("UserList", listparam_userList);

		params.put("WorkflowUserTask", _workflowUserTask == null ? null : _workflowUserTask.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_UserTask_TargetUsers_Add").withParams(params).execute(context);
	}
	public static void sUB_UserTask_TargetUsers_Remove(IContext context, java.util.List<system.proxies.User> _userList, system.proxies.WorkflowUserTask _workflowUserTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		java.util.List<IMendixObject> listparam_userList = null;
		if (_userList != null)
		{
			listparam_userList = new java.util.ArrayList<>();
			for (var obj : _userList) {
				listparam_userList.add(obj.getMendixObject());
			}
		}
		params.put("UserList", listparam_userList);

		params.put("WorkflowUserTask", _workflowUserTask == null ? null : _workflowUserTask.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_UserTask_TargetUsers_Remove").withParams(params).execute(context);
	}
	public static void sUB_UserTaskTimeline_WorkflowUserTask_SetAssignee(IContext context, workflowcommons.proxies.UserTaskTimeLine _userTaskTimeLine, workflowcommons.proxies.UserTaskView _userTaskView)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("UserTaskTimeLine", _userTaskTimeLine == null ? null : _userTaskTimeLine.getMendixObject());
		params.put("UserTaskView", _userTaskView == null ? null : _userTaskView.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_UserTaskTimeline_WorkflowUserTask_SetAssignee").withParams(params).execute(context);
	}
	public static workflowcommons.proxies.UserTaskView sUB_UserTaskView_FindOrCreate(IContext context, system.proxies.WorkflowUserTask _workflowUserTask)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowUserTask", _workflowUserTask == null ? null : _workflowUserTask.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.SUB_UserTaskView_FindOrCreate").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.UserTaskView.initialize(context, result);
	}
	public static java.lang.Long sUB_Workflow_Attachment_Migrate(IContext context, system.proxies.Workflow _nonMigratedWorkflow, java.util.List<workflowcommons.proxies.WorkflowAttachment> _migratedWorkflowAttachmentList, java.util.List<workflowcommons.proxies.WorkflowComment> _autoGeneratedWorkflowCommentList)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("NonMigratedWorkflow", _nonMigratedWorkflow == null ? null : _nonMigratedWorkflow.getMendixObject());
		java.util.List<IMendixObject> listparam_migratedWorkflowAttachmentList = null;
		if (_migratedWorkflowAttachmentList != null)
		{
			listparam_migratedWorkflowAttachmentList = new java.util.ArrayList<>();
			for (var obj : _migratedWorkflowAttachmentList) {
				listparam_migratedWorkflowAttachmentList.add(obj.getMendixObject());
			}
		}
		params.put("MigratedWorkflowAttachmentList", listparam_migratedWorkflowAttachmentList);

		java.util.List<IMendixObject> listparam_autoGeneratedWorkflowCommentList = null;
		if (_autoGeneratedWorkflowCommentList != null)
		{
			listparam_autoGeneratedWorkflowCommentList = new java.util.ArrayList<>();
			for (var obj : _autoGeneratedWorkflowCommentList) {
				listparam_autoGeneratedWorkflowCommentList.add(obj.getMendixObject());
			}
		}
		params.put("AutoGeneratedWorkflowCommentList", listparam_autoGeneratedWorkflowCommentList);

		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_Workflow_Attachment_Migrate").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_Workflow_Attachments_Migration(IContext context)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_Workflow_Attachments_Migration").withParams(params).execute(context);
	}
	public static java.math.BigDecimal sUB_Workflow_AverageHandlingTime(IContext context, java.lang.Long _workflow_CountCompleted, java.util.Date _completedAfter, java.util.Date _completedBefore, system.proxies.WorkflowDefinition _workflowDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow_CountCompleted", _workflow_CountCompleted);
		params.put("CompletedAfter", _completedAfter);
		params.put("CompletedBefore", _completedBefore);
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		return (java.math.BigDecimal) Core.microflowCall("WorkflowCommons.SUB_Workflow_AverageHandlingTime").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_Workflow_CountCompleted(IContext context, java.util.Date _startedAfter, java.util.Date _startedBefore, system.proxies.WorkflowDefinition _workflowDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("StartedAfter", _startedAfter);
		params.put("StartedBefore", _startedBefore);
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_Workflow_CountCompleted").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_Workflow_CountCompletedOnTime(IContext context, java.util.Date _completedAfter, java.util.Date _completedBefore, system.proxies.WorkflowDefinition _workflowDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CompletedAfter", _completedAfter);
		params.put("CompletedBefore", _completedBefore);
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_Workflow_CountCompletedOnTime").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_Workflow_CountCompletedOverdue(IContext context, java.util.Date _completedAfter, java.util.Date _completedBefore, system.proxies.WorkflowDefinition _workflowDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CompletedAfter", _completedAfter);
		params.put("CompletedBefore", _completedBefore);
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_Workflow_CountCompletedOverdue").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_Workflow_CountInProgress(IContext context, java.util.Date _startedAfter, java.util.Date _startedBefore, system.proxies.WorkflowDefinition _workflowDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("StartedAfter", _startedAfter);
		params.put("StartedBefore", _startedBefore);
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_Workflow_CountInProgress").withParams(params).execute(context);
	}
	public static java.lang.Long sUB_Workflow_CountOverdue(IContext context, java.util.Date _startedAfter, java.util.Date _startedBefore, system.proxies.WorkflowDefinition _workflowDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("StartedAfter", _startedAfter);
		params.put("StartedBefore", _startedBefore);
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		return (java.lang.Long) Core.microflowCall("WorkflowCommons.SUB_Workflow_CountOverdue").withParams(params).execute(context);
	}
	public static void sUB_Workflow_ShowWorkflowAdminPage(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_Workflow_ShowWorkflowAdminPage").withParams(params).execute(context);
	}
	public static void sUB_WorkflowDashboard_Update(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_WorkflowDashboard_Update").withParams(params).execute(context);
	}
	public static boolean sUB_WorkflowJumpToDetails_Validate(IContext context, system.proxies.WorkflowJumpToDetails _workflowJumpToDetails)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowJumpToDetails", _workflowJumpToDetails == null ? null : _workflowJumpToDetails.getMendixObject());
		return (java.lang.Boolean) Core.microflowCall("WorkflowCommons.SUB_WorkflowJumpToDetails_Validate").withParams(params).execute(context);
	}
	public static void sUB_WorkflowSeries_CreateOrUpdate(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext, system.proxies.WorkflowDefinition _workflowDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_WorkflowSeries_CreateOrUpdate").withParams(params).execute(context);
	}
	public static void sUB_WorkflowSeriesList_Delete(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_WorkflowSeriesList_Delete").withParams(params).execute(context);
	}
	public static workflowcommons.proxies.WorkflowSummary sUB_WorkflowSummary_CreateOrUpdate(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext, system.proxies.WorkflowDefinition _workflowDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.SUB_WorkflowSummary_CreateOrUpdate").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.WorkflowSummary.initialize(context, result);
	}
	public static workflowcommons.proxies.WorkflowSummary sUB_WorkflowSummary_RetrieveOrCreate(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.SUB_WorkflowSummary_RetrieveOrCreate").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.WorkflowSummary.initialize(context, result);
	}
	public static java.math.BigDecimal sUB_WorkflowTask_AverageHandlingTime(IContext context, java.util.Date _completedAfter, java.util.Date _completedBefore, system.proxies.WorkflowUserTaskDefinition _taskDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("CompletedAfter", _completedAfter);
		params.put("CompletedBefore", _completedBefore);
		params.put("TaskDefinition_Selected", _taskDefinition_Selected == null ? null : _taskDefinition_Selected.getMendixObject());
		return (java.math.BigDecimal) Core.microflowCall("WorkflowCommons.SUB_WorkflowTask_AverageHandlingTime").withParams(params).execute(context);
	}
	public static void sUB_WorkflowTaskDetail_CreateOrUpdate(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext, system.proxies.WorkflowDefinition _workflowDefinition_Selected)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		params.put("WorkflowDefinition_Selected", _workflowDefinition_Selected == null ? null : _workflowDefinition_Selected.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_WorkflowTaskDetail_CreateOrUpdate").withParams(params).execute(context);
	}
	public static void sUB_WorkflowTaskDetail_Delete(IContext context, workflowcommons.proxies.DashboardContext _dashboardContext)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("DashboardContext", _dashboardContext == null ? null : _dashboardContext.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_WorkflowTaskDetail_Delete").withParams(params).execute(context);
	}
	public static workflowcommons.proxies.WorkflowView sUB_WorkflowView_FindOrCreate(IContext context, system.proxies.Workflow _workflow)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("Workflow", _workflow == null ? null : _workflow.getMendixObject());
		IMendixObject result = (IMendixObject)Core.microflowCall("WorkflowCommons.SUB_WorkflowView_FindOrCreate").withParams(params).execute(context);
		return result == null ? null : workflowcommons.proxies.WorkflowView.initialize(context, result);
	}
	public static void sUB_WorkflowView_ShowWorkflowAdminPage(IContext context, workflowcommons.proxies.WorkflowView _workflowView)
	{
		Map<java.lang.String, Object> params = new HashMap<>();
		params.put("WorkflowView", _workflowView == null ? null : _workflowView.getMendixObject());
		Core.microflowCall("WorkflowCommons.SUB_WorkflowView_ShowWorkflowAdminPage").withParams(params).execute(context);
	}
}
